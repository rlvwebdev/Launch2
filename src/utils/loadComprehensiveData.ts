// Utility to load comprehensive data generated by scripts
import { Load } from '@/types';

// Import the comprehensive loads data
export async function loadComprehensiveLoads(): Promise<Load[]> {
  try {
    // In a real app, this would be an API call
    // For now, we'll import the generated JSON file
    const response = await fetch('/comprehensive_loads_data.json');
    if (!response.ok) {
      throw new Error('Failed to load comprehensive data');
    }
    const data = await response.json();
    
    // Convert string dates back to Date objects
    return data.map((load: any) => ({
      ...load,
      pickupDate: new Date(load.pickupDate),
      deliveryDate: new Date(load.deliveryDate),
      createdAt: new Date(load.createdAt),
      updatedAt: new Date(load.updatedAt),
      events: load.events.map((event: any) => ({
        ...event,
        timestamp: new Date(event.timestamp),
        resolvedAt: event.resolvedAt ? new Date(event.resolvedAt) : undefined
      }))
    }));
  } catch (error) {
    console.error('Failed to load comprehensive data:', error);
    return [];
  }
}
